{"version":3,"file":"js/context-detector.66b034791dcc1fac820e.js","mappings":"yBAAA,MAAMA,EAMF,WAAAC,CACYC,EACAC,EACAC,EACAC,GAHA,KAAAH,IAAAA,EACA,KAAAC,QAAAA,EACA,KAAAC,cAAAA,EACA,KAAAC,cAAAA,EATJ,KAAAC,UAAoB,EACpB,KAAAC,IAAwB,IAAIC,MAC5B,KAAAC,MAAuB,KACvB,KAAAC,gBAA0B,EAmC1B,KAAAC,gBAAkB,KACjBC,KAAKN,WACNM,KAAKC,aACLD,KAAKE,oBACT,EAII,KAAAC,iBAAmB,KAClBH,KAAKN,WACNM,KAAKC,aACLD,KAAKI,kBAAkB,eAC3B,EAvCAJ,KAAKK,oBACLL,KAAKM,iBACT,CAGQ,eAAAA,GACJN,KAAKO,WACLP,KAAKQ,WACT,CAGQ,QAAAD,GACJP,KAAKH,MAAQY,OAAOC,YAAW,KAC3BV,KAAKN,UAAW,EAChBM,KAAKW,kBACLX,KAAKI,kBAAkB,UAAU,GAClCJ,KAAKT,QACZ,CAGQ,SAAAiB,GACJR,KAAKL,IAAIiB,OAASZ,KAAKD,gBACvBC,KAAKL,IAAIkB,QAAUb,KAAKG,iBACxBH,KAAKL,IAAImB,IAAMd,KAAKV,GACxB,CAmBQ,UAAAW,GACAD,KAAKH,QACLkB,aAAaf,KAAKH,OAClBG,KAAKH,MAAQ,KAErB,CAGQ,eAAAc,GACJX,KAAKL,IAAImB,IAAM,EACnB,CAGQ,iBAAAZ,GACJc,SAASC,KAAKC,UAAUC,IAAInB,KAAKR,eACjCQ,KAAKoB,IAAI,2CACb,CAGQ,iBAAAhB,CAAkBiB,GACtBL,SAASC,KAAKC,UAAUC,IAAInB,KAAKP,eACjCO,KAAKoB,IAAI,6BAA6BC,MAC1C,CAGQ,GAAAD,CAAIE,GACJtB,KAAKF,gBACLyB,QAAQH,IAAIE,EAEpB,CAGQ,iBAAAjB,GACJ,MAAMmB,EAAQC,YAAYC,MAEpBC,EAAYF,YAAYC,MAAQF,EAEtCxB,KAAKF,eAAiB6B,EAAY,GACtC,EAUA,IAAIvC,EAKJ,gCACA,IACA,kBACA,kB","sources":["webpack://@helsingborg-stad/broken-link-detector/./source/js/context-detector.ts"],"sourcesContent":["class ClientTypeChecker {\n    private timedOut: boolean = false;\n    private img: HTMLImageElement = new Image();\n    private timer: number | null = null;\n    private isDevToolsOpen: boolean = false;\n\n    constructor(\n        private url: string, // URL to the image\n        private timeout: number, // Timeout duration in milliseconds\n        private internalClass: string, // Class for internal clients\n        private externalClass: string // Class for external clients\n    ) {\n        this.checkDevToolsOpen();\n        this.initializeCheck();\n    }\n\n    // Initialize the client type check\n    private initializeCheck(): void {\n        this.setTimer();\n        this.loadImage();\n    }\n\n    // Set a timeout for image loading\n    private setTimer(): void {\n        this.timer = window.setTimeout(() => {\n            this.timedOut = true;\n            this.cancelImageLoad();\n            this.setExternalClient('timeout');\n        }, this.timeout);\n    }\n\n    // Load the image and handle success or failure\n    private loadImage(): void {\n        this.img.onload = this.handleImageLoad;\n        this.img.onerror = this.handleImageError;\n        this.img.src = this.url;\n    }\n\n    // Handle successful image load (internal client)\n    private handleImageLoad = (): void => {\n        if (!this.timedOut) {\n            this.clearTimer();\n            this.setInternalClient();\n        }\n    }\n\n    // Handle image load error (external client)\n    private handleImageError = (): void => {\n        if (!this.timedOut) {\n            this.clearTimer();\n            this.setExternalClient('image error');\n        }\n    }\n\n    // Clear the timer if image loads or errors before timeout\n    private clearTimer(): void {\n        if (this.timer) {\n            clearTimeout(this.timer);\n            this.timer = null;\n        }\n    }\n\n    // Cancel image loading on timeout\n    private cancelImageLoad(): void {\n        this.img.src = ''; // Cancel image loading\n    }\n\n    // Mark as internal client\n    private setInternalClient(): void {\n        document.body.classList.add(this.internalClass);\n        this.log('Internal client detected (image loaded).');\n    }\n\n    // Mark as external client\n    private setExternalClient(reason: string): void {\n        document.body.classList.add(this.externalClass);\n        this.log(`External client detected (${reason}).`);\n    }\n\n    // Log messages only if DevTools is open\n    private log(message: string): void {\n        if (this.isDevToolsOpen) {\n            console.log(message);\n        }\n    }\n\n    // Check if DevTools is open by measuring execution time of the debugger\n    private checkDevToolsOpen(): void {\n        const start = performance.now();\n        debugger;\n        const timeTaken = performance.now() - start;\n        // DevTools are likely open if execution time is more than 100ms\n        this.isDevToolsOpen = timeTaken > 100;\n    }\n}\n\n// Function to initialize client type checker\nexport function initializeClientTypeChecker(\n    url: string,\n    timeout: number,\n    internalClass: string,\n    externalClass: string\n): void {\n    new ClientTypeChecker(url, timeout, internalClass, externalClass);\n}\n\n\ninitializeClientTypeChecker(\n    'https://example.com/image.jpg',\n    3000,\n    'internal-client',\n    'external-client'\n);\n"],"names":["ClientTypeChecker","constructor","url","timeout","internalClass","externalClass","timedOut","img","Image","timer","isDevToolsOpen","handleImageLoad","this","clearTimer","setInternalClient","handleImageError","setExternalClient","checkDevToolsOpen","initializeCheck","setTimer","loadImage","window","setTimeout","cancelImageLoad","onload","onerror","src","clearTimeout","document","body","classList","add","log","reason","message","console","start","performance","now","timeTaken"],"sourceRoot":""}